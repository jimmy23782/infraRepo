  ArgoBootstrapProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "argocd-bootstrap-${ClusterName}"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      TimeoutInMinutes: 30
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        PrivilegedMode: false
        EnvironmentVariables:
          - Name: CLUSTER_NAME
            Value: !Ref ClusterName
          - Name: AWS_DEFAULT_REGION
            Value: !Ref Region
          - Name: K8S_NS
            Value: !Ref KubernetesNamespace
          - Name: EXPOSE_LB
            Value: !Ref ExposeServerAsLB
          - Name: PARAM_PREFIX
            Value: !Ref SSMParamPrefix
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Sub "/aws/codebuild/argocd-bootstrap-${ClusterName}"
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          env:
            shell: bash
          phases:
            install:
              commands:
                - set -euo pipefail
                - KVER=1.30.0
                - echo "Downloading kubectl v${KVER} from dl.k8s.io ..."
                - curl -sLo kubectl "https://dl.k8s.io/release/v${KVER}/bin/linux/amd64/kubectl"
                - echo "Verifying kubectl checksum..."
                - curl -sL "https://dl.k8s.io/release/v${KVER}/bin/linux/amd64/kubectl.sha256" -o kubectl.sha256
                - echo "$(cat kubectl.sha256)  kubectl" | sha256sum -c -
                - chmod +x kubectl && mv kubectl /usr/local/bin/
                - kubectl version --client --short
                - echo "Configure kubeconfig"
                - aws eks update-kubeconfig --name "$CLUSTER_NAME" --region "$AWS_DEFAULT_REGION"
            build:
              commands:
                - set -euo pipefail
                - echo "Create namespace if not exists"
                - kubectl create namespace "$K8S_NS" || true
                - echo "Install Argo CD (official manifests)"
                - kubectl apply -n "$K8S_NS" -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
                - echo "Wait for Argo CD server deployment to become available"
                - kubectl -n "$K8S_NS" rollout status deploy/argocd-server --timeout=5m
                - |
                  if [ "$EXPOSE_LB" = "true" ]; then
                    echo "Patch argocd-server Service to type=LoadBalancer"
                    kubectl -n "$K8S_NS" patch svc argocd-server -p '{"spec":{"type":"LoadBalancer"}}' || true
                  fi
                - echo "Fetch admin password & store in SSM"
                - PW=$(kubectl -n "$K8S_NS" get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' | base64 -d)
                - aws ssm put-parameter --name "$PARAM_PREFIX/$CLUSTER_NAME/argocd/admin-password" --type SecureString --overwrite --value "$PW"
                - aws ssm add-tags-to-resource --resource-type "Parameter" --resource-id "$PARAM_PREFIX/$CLUSTER_NAME/argocd/admin-password" --tags "Key=eks-cluster,Value=$CLUSTER_NAME" "Key=component,Value=argocd"
                - echo "Fetch LB hostname (may take time to provision)"
                - HN=""
                - for i in {1..60}; do
                    HN=$(kubectl -n "$K8S_NS" get svc argocd-server -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true);
                    if [ -n "$HN" ]; then break; fi;
                    echo "Waiting for LB hostname..."; sleep 10;
                  done
                - |
                  if [ -n "$HN" ]; then
                    aws ssm put-parameter --name "$PARAM_PREFIX/$CLUSTER_NAME/argocd/server-hostname" --type String --overwrite --value "$HN"
                    aws ssm add-tags-to-resource --resource-type "Parameter" --resource-id "$PARAM_PREFIX/$CLUSTER_NAME/argocd/server-hostname" --tags "Key=eks-cluster,Value=$CLUSTER_NAME" "Key=component,Value=argocd"
                  else
                    echo "LB hostname not ready yet; you can check later and write it to SSM manually."
                  fi