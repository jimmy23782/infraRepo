name: cfn-plan-apply

on:
  pull_request:
    paths:
      - "cloudformation/**"
      - ".github/workflows/cfn-plan-apply.yml"
  push:
    branches: ["main"]
    paths:
      - "cloudformation/**"
      - ".github/workflows/cfn-plan-apply.yml"

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  AWS_REGION: ap-southeast-2
  ENV: dev
  PREFIX: demo-eks
  VPC_STACK: demo-eks-vpc-dev
  EKS_STACK: demo-eks-eks-dev
  NG_STACK:  demo-eks-nodegroup-dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Ensure jq
        run: sudo apt-get update -y && sudo apt-get install -y jq

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::685801731369:role/github-oidc-deployer
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate CFN templates
        run: |
          aws cloudformation validate-template --template-body file://cloudformation/vpc.yaml
          aws cloudformation validate-template --template-body file://cloudformation/eks-cluster.yaml
          aws cloudformation validate-template --template-body file://cloudformation/nodegroup.yaml

      # ---------- VPC ----------
      - name: Create/Update VPC stack
        run: |
          aws cloudformation deploy \
            --template-file cloudformation/vpc.yaml \
            --stack-name $VPC_STACK \
            --parameter-overrides file://cloudformation/parameters/${ENV}/vpc.json \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

      - name: Get VPC outputs
        id: vpc
        run: |
          OUT=$(aws cloudformation describe-stacks --stack-name "${VPC_STACK}" --query "Stacks[0].Outputs")
          echo "public_subnets=$(echo "$OUT" | jq -r '.[] | select(.OutputKey=="PublicSubnetIds").OutputValue')" >> $GITHUB_OUTPUT

      # ---------- PREFLIGHT: EKS ----------
      - name: Preflight - delete stuck EKS create
        run: |
          STATUS=$(aws cloudformation describe-stacks --stack-name "${EKS_STACK}" \
            --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "NONE")
          echo "EKS stack status: $STATUS"
          if [[ "$STATUS" == "ROLLBACK_FAILED" || "$STATUS" == "ROLLBACK_COMPLETE" ]]; then
            aws cloudformation delete-stack --stack-name "${EKS_STACK}" || true
            aws cloudformation wait stack-delete-complete --stack-name "${EKS_STACK}" || true
          fi

      - name: Create/Update EKS cluster
        run: |
          PARAMS=$(jq -r '.Parameters | to_entries[] | "\(.key)=\(.value)"' cloudformation/parameters/${ENV}/eks.json)
          aws cloudformation deploy \
            --template-file cloudformation/eks-cluster.yaml \
            --stack-name "${EKS_STACK}" \
            --parameter-overrides $PARAMS PublicSubnetIds="${{ steps.vpc.outputs.public_subnets }}" \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

      - name: Wait for EKS to be ACTIVE
        run: |
          CLUSTER=$(aws cloudformation describe-stacks --stack-name "${EKS_STACK}" \
            --query "Stacks[0].Outputs[?OutputKey=='ClusterName'].OutputValue" --output text)
          aws eks wait cluster-active --name "$CLUSTER"

      - name: Bootstrap Argo CD (CFN -> CodeBuild -> Argo install)
        run: |
          aws cloudformation deploy \
            --template-file cloudformation/argocd-bootstrap.yaml \
            --stack-name demo-eks-argocd-dev \
            --parameter-overrides \
              ClusterName=demo-eks-dev \
              Region=${{ env.AWS_REGION }} \
              KubernetesNamespace=argocd \
              ExposeServerAsLB=true \
              SSMParamPrefix=/eks \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

      # ---------- PREFLIGHT: Nodegroup ----------
      - name: Preflight - delete stuck Nodegroup create
        run: |
          STATUS=$(aws cloudformation describe-stacks --stack-name "${NG_STACK}" \
            --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "NONE")
          echo "Nodegroup stack status: $STATUS"
          if [[ "$STATUS" == "ROLLBACK_FAILED" || "$STATUS" == "ROLLBACK_COMPLETE" ]]; then
            aws cloudformation delete-stack --stack-name "${NG_STACK}" || true
            aws cloudformation wait stack-delete-complete --stack-name "${NG_STACK}" || true
          fi

      - name: Create/Update node group
        run: |
          PARAMS=$(jq -r '.Parameters | to_entries[] | "\(.key)=\(.value)"' cloudformation/parameters/${ENV}/nodegroup.json)
          aws cloudformation deploy \
            --template-file cloudformation/nodegroup.yaml \
            --stack-name "${NG_STACK}" \
            --parameter-overrides $PARAMS PublicSubnetIds="${{ steps.vpc.outputs.public_subnets }}" \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

      # ---------- Failure event dumps (helpful on error) ----------
      - name: Show EKS stack failure events (if any)
        if: failure()
        run: |
          aws cloudformation describe-stack-events --stack-name "${EKS_STACK}" \
            --max-items 40 \
            --query "StackEvents[?ends_with(ResourceStatus,'FAILED')].[Timestamp,LogicalResourceId,ResourceStatus,ResourceStatusReason]" \
            --output table

      - name: Show Nodegroup stack failure events (if any)
        if: failure()
        run: |
          aws cloudformation describe-stack-events --stack-name "${NG_STACK}" \
            --max-items 40 \
            --query "StackEvents[?ends_with(ResourceStatus,'FAILED')].[Timestamp,LogicalResourceId,ResourceStatus,ResourceStatusReason]" \
            --output table